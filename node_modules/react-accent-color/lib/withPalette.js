'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = withPalette;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _arrayEqual = require('./arrayEqual');

var _arrayEqual2 = _interopRequireDefault(_arrayEqual);

var _createPalette = require('./createPalette');

var _createPalette2 = _interopRequireDefault(_createPalette);

var _mapEqual = require('./mapEqual');

var _mapEqual2 = _interopRequireDefault(_mapEqual);

var _mapExcept = require('./mapExcept');

var _mapExcept2 = _interopRequireDefault(_mapExcept);

var _memoize = require('./memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _PaletteProvider = require('./PaletteProvider');

var _PaletteProvider2 = _interopRequireDefault(_PaletteProvider);

var _Subject = require('./Subject');

var _Subject2 = _interopRequireDefault(_Subject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_ACCENT = '#0078D7';
var DEFAULT_THEME = 'light';

function propsEqual(x, y) {
  var keys = Object.keys(x);

  return (0, _arrayEqual2.default)(keys, Object.keys(y)) && keys.every(key, x[key] === y[key]);
}

function withPalette(propsFactory) {
  return function (WrappedComponent) {
    var WithPalette = function (_React$Component) {
      _inherits(WithPalette, _React$Component);

      function WithPalette(props, context) {
        _classCallCheck(this, WithPalette);

        var _this = _possibleConstructorReturn(this, (WithPalette.__proto__ || Object.getPrototypeOf(WithPalette)).call(this, props, context));

        var contextValue = context.palette && context.palette.getValue();

        _this.createAndMemoizePalette = (0, _memoize2.default)(_createPalette2.default);
        _this.state = _this.createState({}, props, contextValue, true);
        return _this;
      }

      _createClass(WithPalette, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.subscribePalette(this.context);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps, nextContext) {
          var _this2 = this;

          var shouldUpdate = void 0;

          if (nextContext.palette !== this.context.palette) {
            this.subscribePalette(nextContext);
            shouldUpdate = 1;
          }

          // React may fire componentWillReceiveProps more than it should
          // https://github.com/facebook/react/issues/3610
          if (!(0, _mapEqual2.default)(nextProps, this.props)) {
            shouldUpdate = 1;
          }

          if (shouldUpdate) {
            var _ref = nextContext || {},
                palette = _ref.palette;

            var contextValue = palette && palette.getValue();

            this.setState(function (state) {
              return _this2.createState(state, nextProps, contextValue, true);
            });
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.subscribePalette();
        }
      }, {
        key: 'subscribePalette',
        value: function subscribePalette(context) {
          var _this3 = this;

          this.unsubscribe && this.unsubscribe();

          var _ref2 = context || {},
              palette = _ref2.palette;

          this.unsubscribe = palette && palette.subscribe(function (contextValue) {
            _this3.setState(function (state) {
              return _this3.createState(state, _this3.props, contextValue);
            });
          });
        }
      }, {
        key: 'getHoistedProps',
        value: function getHoistedProps(props) {
          var contextValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          var accent = props.accent || contextValue.accent || DEFAULT_ACCENT;
          var theme = props.theme || contextValue.theme || DEFAULT_THEME;

          return _extends({}, (0, _mapExcept2.default)(contextValue, ['palette']), {
            accent: accent,
            theme: theme
          });
        }
      }, {
        key: 'createState',
        value: function createState(state, props) {
          var contextValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var propsChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

          var nextHoistedProps = this.getHoistedProps(props, contextValue);
          var accent = nextHoistedProps.accent,
              theme = nextHoistedProps.theme;

          var palette = accent === contextValue.accent && theme === contextValue.theme ? contextValue.palette : this.createAndMemoizePalette(accent, theme);

          if (propsChanged || !(0, _mapEqual2.default)(nextHoistedProps, state.hoistedProps)) {
            return {
              cssProps: propsFactory && propsFactory(_extends({}, nextHoistedProps, {
                palette: palette
              }), props),
              hoistedProps: nextHoistedProps
            };
          }
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(WrappedComponent, _extends({}, this.state.cssProps, this.props));
        }
      }]);

      return WithPalette;
    }(_react2.default.Component);

    WithPalette.contextTypes = {
      palette: _propTypes2.default.instanceOf(_Subject2.default)
    };

    WithPalette.displayName = 'withPalette(' + (WrappedComponent.displayName || WrappedComponent.name) + ')';
    WithPalette.propTypes = {
      accent: _propTypes2.default.string,
      theme: _propTypes2.default.oneOf(['dark', 'light'])
    };

    return WithPalette;
  };
}
//# sourceMappingURL=withPalette.js.map