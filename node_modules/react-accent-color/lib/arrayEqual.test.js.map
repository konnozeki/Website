{"version":3,"sources":["../src/arrayEqual.test.js"],"names":["test","expect","toBe","array"],"mappings":";;AAAA;;;;;;AAEAA,KAAK,sCAAL,EAA6C,YAAM;AACjDC,SAAO,0BAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAAP,EAA6BC,IAA7B,CAAkC,IAAlC;AACD,CAFD;;AAIAF,KAAK,mCAAL,EAA0C,YAAM;AAC9C,MAAMG,QAAQ,CAAC,CAAD,CAAd;;AAEAF,SAAO,0BAAWE,KAAX,EAAkBA,KAAlB,CAAP,EAAiCD,IAAjC,CAAsC,IAAtC;AACD,CAJD;;AAMAF,KAAK,wCAAL,EAA+C,YAAM;AACnDC,SAAO,0BAAW,IAAX,EAAiB,IAAjB,CAAP,EAA+BC,IAA/B,CAAoC,IAApC;AACD,CAFD;;AAIAF,KAAK,yCAAL,EAAgD,YAAM;AACpDC,SAAO,0BAAW,EAAX,EAAe,EAAf,CAAP,EAA2BC,IAA3B,CAAgC,IAAhC;AACD,CAFD;;AAIAF,KAAK,sDAAL,EAA6D,YAAM;AACjEC,SAAO,0BAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAAP,EAA6BC,IAA7B,CAAkC,KAAlC;AACD,CAFD;;AAIAF,KAAK,uDAAL,EAA8D,YAAM;AAClEC,SAAO,0BAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAAP,EAAgCC,IAAhC,CAAqC,KAArC;AACD,CAFD;;AAIAF,KAAK,wDAAL,EAA+D,YAAM;AACnEC,SAAO,0BAAW,CAAC,CAAD,EAAI,CAAJ,CAAX,EAAmB,CAAC,CAAD,CAAnB,CAAP,EAAgCC,IAAhC,CAAqC,KAArC;AACD,CAFD;;AAIAF,KAAK,0CAAL,EAAiD,YAAM;AACrDC,SAAO,0BAAW,IAAX,EAAiB,CAAC,CAAD,CAAjB,CAAP,EAA8BC,IAA9B,CAAmC,KAAnC;AACD,CAFD;;AAIAF,KAAK,2CAAL,EAAkD,YAAM;AACtDC,SAAO,0BAAW,IAAX,EAAiB,CAAC,CAAD,CAAjB,CAAP,EAA8BC,IAA9B,CAAmC,KAAnC;AACD,CAFD","file":"arrayEqual.test.js","sourcesContent":["import arrayEqual from './arrayEqual';\r\n\r\ntest('should return true for similar array', () => {\r\n  expect(arrayEqual([1], [1])).toBe(true);\r\n});\r\n\r\ntest('should return true for same array', () => {\r\n  const array = [1];\r\n\r\n  expect(arrayEqual(array, array)).toBe(true);\r\n});\r\n\r\ntest('should return true for both null array', () => {\r\n  expect(arrayEqual(null, null)).toBe(true);\r\n});\r\n\r\ntest('should return true for both empty array', () => {\r\n  expect(arrayEqual([], [])).toBe(true);\r\n});\r\n\r\ntest('should return false for array with different content', () => {\r\n  expect(arrayEqual([1], [2])).toBe(false);\r\n});\r\n\r\ntest('should return false for array with larger first array', () => {\r\n  expect(arrayEqual([1], [1, 2])).toBe(false);\r\n});\r\n\r\ntest('should return false for array with larger second array', () => {\r\n  expect(arrayEqual([1, 2], [1])).toBe(false);\r\n});\r\n\r\ntest('should return false for first null array', () => {\r\n  expect(arrayEqual(null, [1])).toBe(false);\r\n});\r\n\r\ntest('should return false for second null array', () => {\r\n  expect(arrayEqual(null, [1])).toBe(false);\r\n});\r\n"]}