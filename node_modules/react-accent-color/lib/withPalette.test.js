'use strict';

var _enzyme = require('enzyme');

var _enzymeAdapterReact = require('enzyme-adapter-react-16');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _PaletteProvider = require('./PaletteProvider');

var _PaletteProvider2 = _interopRequireDefault(_PaletteProvider);

var _withPalette = require('./withPalette');

var _withPalette2 = _interopRequireDefault(_withPalette);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _enzyme.configure)({ adapter: new _enzymeAdapterReact2.default() });

var Dummy = function Dummy(props) {
  return _react2.default.createElement('div', { 'data-accent': props.accent });
};

Dummy.displayName = 'Dummy';

it('should wrap component with CSS factories', function () {
  var propFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref, props) {
    var accent = _ref.accent,
        palette = _ref.palette,
        theme = _ref.theme;

    propFactory();

    return {
      accent: accent,
      background: palette.background,
      hoistedFourFiveSix: props.fourFiveSix,
      theme: theme
    };
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00', theme: 'light' },
    _react2.default.createElement(WrappedDummy, { oneTwoThree: '123', fourFiveSix: '456' })
  ));

  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', '123');
  expect(provider.find('Dummy').props()).toHaveProperty('fourFiveSix', '456');
  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#F00');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#FFF');
  expect(provider.find('Dummy').props()).toHaveProperty('theme', 'light');
  expect(provider.find('Dummy').props()).toHaveProperty('hoistedFourFiveSix', '456');
  expect(propFactory).toHaveBeenCalledTimes(1);
});

it('should refresh with accent color change', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref2, props) {
    var accent = _ref2.accent,
        palette = _ref2.palette;

    paletteFactory();

    return {
      accent: accent,
      background: palette.background
    };
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00' },
    _react2.default.createElement(WrappedDummy, { oneTwoThree: '123' })
  ));

  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#F00');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#FFF');
  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', '123');
  expect(paletteFactory).toHaveBeenCalledTimes(1);

  provider.setProps({ accent: '#0F0' });

  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#0F0');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#FFF');
  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', '123');
  expect(paletteFactory).toHaveBeenCalledTimes(2);
});

it('should not refresh with no color change', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (palette, props) {
    paletteFactory();

    return {};
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00', theme: 'light' },
    _react2.default.createElement(WrappedDummy, { oneTwoThree: '123' })
  ));

  expect(paletteFactory).toHaveBeenCalledTimes(1);

  provider.setProps({ accent: '#F00', theme: 'light' });

  // We should not call paletteFactory if there is nothing actually changed
  expect(paletteFactory).toHaveBeenCalledTimes(1);

  provider.setProps({ dummy: '123' });

  // We added a dummy prop to <PaletteProvider>, we should let paletteFactory know about it
  expect(paletteFactory).toHaveBeenCalledTimes(2);
});

it('should override palette with accent props', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref3, props) {
    var accent = _ref3.accent,
        oneTwoThree = _ref3.oneTwoThree,
        palette = _ref3.palette,
        theme = _ref3.theme;

    paletteFactory();

    return {
      accent: accent,
      background: palette.background,
      oneTwoThree: oneTwoThree,
      theme: theme
    };
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00', theme: 'dark' },
    _react2.default.createElement(WrappedDummy, { accent: '#999' })
  ));

  expect(paletteFactory).toHaveBeenCalledTimes(1);
  expect(provider.getDOMNode()).toMatchSnapshot();
  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#999');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#000');
  expect(provider.find('Dummy').props()).toHaveProperty('theme', 'dark');

  provider.setProps({ accent: '#FFF' });

  // Changing provider.accent should not trigger a new update because we have already overrode the accent color
  expect(paletteFactory).toHaveBeenCalledTimes(1);

  provider.setProps({ oneTwoThree: 123 });

  expect(paletteFactory).toHaveBeenCalledTimes(2);
  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', 123);

  provider.setProps({ theme: 'light' });

  expect(paletteFactory).toHaveBeenCalledTimes(3);
  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#999');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#FFF');
  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', 123);
  expect(provider.find('Dummy').props()).toHaveProperty('theme', 'light');
});

it('should recalculate palette on props change', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref4, _ref5) {
    var accent = _ref4.accent;
    var oneTwoThree = _ref5.oneTwoThree;

    paletteFactory();

    return {
      accent: accent,
      oneTwoThree: oneTwoThree
    };
  })(Dummy);

  var wrappedDummy = (0, _enzyme.mount)(_react2.default.createElement(WrappedDummy, { accent: '#999' }));

  expect(paletteFactory).toHaveBeenCalledTimes(1);
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('accent', '#999');

  wrappedDummy.setProps({ oneTwoThree: 123 });

  expect(paletteFactory).toHaveBeenCalledTimes(2);
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('accent', '#999');
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('oneTwoThree', 123);
});

it('should work without <PaletteProvider>', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref6, _ref7) {
    var accent = _ref6.accent,
        palette = _ref6.palette,
        theme = _ref6.theme;
    var fourFiveSix = _ref7.fourFiveSix;

    paletteFactory();

    return {
      accent: accent,
      background: palette.background,
      hoistedFourFiveSix: fourFiveSix,
      theme: theme
    };
  })(Dummy);

  var wrappedDummy = (0, _enzyme.mount)(_react2.default.createElement(WrappedDummy, { accent: '#F00', theme: 'dark', oneTwoThree: 123, fourFiveSix: 456 }));

  expect(paletteFactory).toHaveBeenCalledTimes(1);
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('oneTwoThree', 123);
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('fourFiveSix', 456);
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('accent', '#F00');
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('background', '#000');
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('theme', 'dark');
  expect(wrappedDummy.find('Dummy').props()).toHaveProperty('hoistedFourFiveSix', 456);
});

it('should hoist all props from <PaletteProvider>', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref8, props) {
    var oneTwoThree = _ref8.oneTwoThree;

    paletteFactory();

    return {
      hoistedOneTwoThree: oneTwoThree
    };
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00', theme: 'light', oneTwoThree: 123 },
    _react2.default.createElement(WrappedDummy, null)
  ));

  expect(paletteFactory).toHaveBeenCalledTimes(1);
  expect(provider.find('Dummy').props().oneTwoThree).toBeUndefined();
  expect(provider.find('Dummy').props()).toHaveProperty('hoistedOneTwoThree', 123);
});

it('should stack multiple <PaletteProvider>', function () {
  var paletteFactory = jest.fn();
  var WrappedDummy = (0, _withPalette2.default)(function (_ref9, props) {
    var accent = _ref9.accent,
        fourFiveSix = _ref9.fourFiveSix,
        oneTwoThree = _ref9.oneTwoThree,
        palette = _ref9.palette,
        theme = _ref9.theme;

    paletteFactory();

    return {
      accent: accent,
      background: palette.background,
      oneTwoThree: oneTwoThree,
      fourFiveSix: fourFiveSix,
      theme: theme
    };
  })(Dummy);

  var provider = (0, _enzyme.mount)(_react2.default.createElement(
    _PaletteProvider2.default,
    { accent: '#F00', theme: 'dark', oneTwoThree: 123 },
    _react2.default.createElement(
      _PaletteProvider2.default,
      { accent: '#0F0', fourFiveSix: 456 },
      _react2.default.createElement(WrappedDummy, { oneTwoThree: '1-2-3' })
    )
  ));

  expect(paletteFactory).toHaveBeenCalledTimes(1);
  expect(provider.find('Dummy').props()).toHaveProperty('accent', '#0F0');
  expect(provider.find('Dummy').props()).toHaveProperty('background', '#000');
  expect(provider.find('Dummy').props()).toHaveProperty('theme', 'dark');
  expect(provider.find('Dummy').props()).toHaveProperty('oneTwoThree', '1-2-3');
  expect(provider.find('Dummy').props()).toHaveProperty('fourFiveSix', 456);
});
//# sourceMappingURL=withPalette.test.js.map