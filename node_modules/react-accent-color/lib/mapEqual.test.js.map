{"version":3,"sources":["../src/mapEqual.test.js"],"names":["test","expect","abc","toBe","o","def"],"mappings":";;AAAA;;;;;;AAEAA,KAAK,oCAAL,EAA2C,YAAM;AAC/CC,SAAO,wBAAS,EAAEC,KAAK,GAAP,EAAT,EAAuB,EAAEA,KAAK,GAAP,EAAvB,CAAP,EAA6CC,IAA7C,CAAkD,IAAlD;AACD,CAFD;;AAIAH,KAAK,iCAAL,EAAwC,YAAM;AAC5C,MAAMI,IAAI,EAAEF,KAAK,GAAP,EAAV;;AAEAD,SAAO,wBAASG,CAAT,EAAYA,CAAZ,CAAP,EAAuBD,IAAvB,CAA4B,IAA5B;AACD,CAJD;;AAMAH,KAAK,sCAAL,EAA6C,YAAM;AACjDC,SAAO,wBAAS,IAAT,EAAe,IAAf,CAAP,EAA6BE,IAA7B,CAAkC,IAAlC;AACD,CAFD;;AAIAH,KAAK,0CAAL,EAAiD,YAAM;AACrDC,SAAO,wBAAS,EAAEC,KAAK,GAAP,EAAYG,KAAK,GAAjB,EAAT,EAAiC,EAAEH,KAAK,GAAP,EAAjC,CAAP,EAAuDC,IAAvD,CAA4D,KAA5D;AACD,CAFD;;AAIAH,KAAK,2CAAL,EAAkD,YAAM;AACtDC,SAAO,wBAAS,EAAEC,KAAK,GAAP,EAAT,EAAuB,EAAEA,KAAK,GAAP,EAAYG,KAAK,GAAjB,EAAvB,CAAP,EAAuDF,IAAvD,CAA4D,KAA5D;AACD,CAFD;;AAIAH,KAAK,wCAAL,EAA+C,YAAM;AACnDC,SAAO,wBAAS,EAAEC,KAAK,GAAP,EAAT,EAAuB,EAAEG,KAAK,GAAP,EAAvB,CAAP,EAA6CF,IAA7C,CAAkD,KAAlD;AACD,CAFD","file":"mapEqual.test.js","sourcesContent":["import mapEqual from './mapEqual';\r\n\r\ntest('should return true for similar map', () => {\r\n  expect(mapEqual({ abc: 123 }, { abc: 123 })).toBe(true);\r\n});\r\n\r\ntest('should return true for same map', () => {\r\n  const o = { abc: 123 };\r\n\r\n  expect(mapEqual(o, o)).toBe(true);\r\n});\r\n\r\ntest('should return true for both null map', () => {\r\n  expect(mapEqual(null, null)).toBe(true);\r\n});\r\n\r\ntest('should return false for larger first map', () => {\r\n  expect(mapEqual({ abc: 123, def: 456 }, { abc: 123 })).toBe(false);\r\n});\r\n\r\ntest('should return false for larger second map', () => {\r\n  expect(mapEqual({ abc: 123 }, { abc: 123, def: 456 })).toBe(false);\r\n});\r\n\r\ntest('should return false for different maps', () => {\r\n  expect(mapEqual({ abc: 123 }, { def: 456 })).toBe(false);\r\n});\r\n"]}